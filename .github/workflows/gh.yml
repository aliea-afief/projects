name: Detect Changed Files via gh api (No Checkout)
on:
  push:
    branches:
      [ pre-release_** ]
  pull_request:
    branches:
      [main]
jobs:
  detect-files:
    runs-on: ubuntu-latest
    steps:
      - name: Set up GH CLI authentication
        run: |
          GITHUB_TOKEN=${{ secrets.API_TOKEN }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
      - name: Detect changed files (PUSH)
        shell: bash
        env:
          REPO: ${{ github.repository }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          # Get all commit SHAs from the event
          commitShas="${{ join(github.event.commits.*.id, ' ') }}"
          
          # Fallback for pull_request (GitHub only sends HEAD SHA)
          # if [ -z "$commitShas" ] && [ "$EVENT_NAME" == "pull_request" ]; then
          #   commitShas="${{ github.event.pull_request.head.sha }}"
          # fi
          declare -A changedFiles

          echo "Processing commits: $commitShas"

          for sha in $commitShas; do
            echo "Fetching commit: $sha"
            commits=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/OWNER/REPO/commits/REF

            filenames=$(jq -r '.files[] | select(.status == "modified" or .status == "added") | .filename' <<< "${commits}")
            
            for filename in $filenames; do
              changedFiles["$filename"]=1
            done
          done

          echo ""
          echo "✅ Unique Changed Files:"
          for file in "${!changedFiles[@]}"; do
            echo "$file"
          done

          # Save output for future steps (optional)
          echo "changed_files=${!changedFiles[@]}" >> $GITHUB_OUTPUT          

  # compare-branches:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Compare branchC...branchB using GitHub API
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_TOKEN }}
  #         OWNER: ${{ github.repository_owner }}
  #         REPO: ${{ github.event.repository.name }}
  #         BASE: ${{ github.base_ref }}
  #         HEAD: ${{ github.head_ref }}
  #       run: |
  #         echo "Comparing $BASE...$HEAD"
          
  #         RESPONSE=$(curl -s \
  #           -H "Authorization: Bearer $GH_TOKEN" \
  #           -H "Accept: application/vnd.github+json" \
  #           https://github.maybank.com/repos/${GITHUB_REPOSITORY}/compare/$BASE...$HEAD)

  #         echo "$RESPONSE" > compare.json

  #         echo "Commit SHAs:"
  #         jq -r '.commits[].sha' compare.json

  #         echo "Commit Messages:"
  #         jq -r '.commits[].commit.message' compare.json

  #         echo "Changed Files:"
  #         jq -r '.files[].filename' compare.json
# we got to fetch changed files for PR with gh command, but not for push 
# we can try the compare branch method to get commits (API)
  # detect-files:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up GH CLI authentication
  #       run: |
  #         # GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
  #         echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

  #     - name: Get commit SHAs for push or pull_request
  #       shell: bash
  #       env:
  #         EVENT_NAME: ${{ github.event_name }}
  #         PUSH_COMMITS: ${{ toJson(github.event.commits) }}
  #         PUSH_AFTER: ${{ github.event.after }}
  #         PUSH_BEFORE: ${{ github.event.before }}
  #         PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha || '' }}
  #       run: |
  #         commitShas=""

  #         if [ "$EVENT_NAME" == "push" ]; then
  #           # If it's a regular push with commits
  #           commitShas=$(echo "$PUSH_COMMITS" | jq -r '.[].id')

  #           # If it's a new branch (before is all zeroes) and no commits were listed
  #           if [ -z "$commitShas" ] && [ "$PUSH_BEFORE" == "0000000000000000000000000000000000000000" ]; then
  #             commitShas="$PUSH_AFTER"
  #           fi
  #         elif [ "$EVENT_NAME" == "pull_request" ]; then
  #           # Fallback for pull_request
  #           commitShas="$PULL_REQUEST_HEAD_SHA"
  #         fi

  #         echo "Commit SHAs:"
  #         echo "$commitShas"
  #         declare -A changedFiles
  #         echo "Processing commits: $commitShas"
  #         for sha in $commitShas; do
  #           echo "Fetching commit: $sha"
  #           commits=$(gh api \
  #             -H "Accept: application/vnd.github+json" \
  #             -H "X-GitHub-Api-Version: 2022-11-28" \
  #             "/repos/$REPO/commits/${sha}")

  #           filenames=$(jq -r '.files[] | select(.status == "modified" or .status == "added") | .filename' <<< "${commits}")
            
  #           for filename in $filenames; do
  #             changedFiles["$filename"]=1
  #           done
  #         done

  #         echo ""
  #         echo "✅ Unique Changed Files:"
  #         for file in "${!changedFiles[@]}"; do
  #           echo "$file"
  #         done

      # - name: Get commit SHAs for push or pull_request event
      #   shell: bash
      #   env:
      #     EVENT_NAME: ${{ github.event_name }}
      #     PUSH_COMMITS: ${{ toJson(github.event.commits) }}
      #     PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha || '' }}
      #   run: |
      #     # Extract commit SHAs for push event
      #     if [ "$EVENT_NAME" == "push" ]; then
      #       # Parse commit SHAs from the JSON array PUSH_COMMITS
      #       commitShas=$(echo "$PUSH_COMMITS" | jq -r '.[].id')
      #     fi

      #     # Fallback for pull_request event if no commits found from push (shouldn't happen here, but just in case)
      #     if [ -z "$commitShas" ] && [ "$EVENT_NAME" == "pull_request" ]; then
      #       commitShas="$PULL_REQUEST_HEAD_SHA"
      #     fi

      #     echo "Commit SHAs:"
      #     echo "$commitShas"

      #     declare -A changedFiles
      #     echo "Processing commits: $commitShas"
      #     for sha in $commitShas; do
      #       echo "Fetching commit: $sha"
      #       commits=$(gh api \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "X-GitHub-Api-Version: 2022-11-28" \
      #         "/repos/$REPO/commits/${sha}")

      #       filenames=$(jq -r '.files[] | select(.status == "modified" or .status == "added") | .filename' <<< "${commits}")
            
      #       for filename in $filenames; do
      #         changedFiles["$filename"]=1
      #       done
      #     done

      #     echo ""
      #     echo "✅ Unique Changed Files:"
      #     for file in "${!changedFiles[@]}"; do
      #       echo "$file"
      #     done          
          
      # - name: Detect changed files
      #   shell: bash
      #   env:
      #     REPO: ${{ github.repository }}
      #     EVENT_NAME: ${{ github.event_name }}
      #   run: |
      #     # Get all commit SHAs from the event
      #     commitShas="${{ join(github.event.commits.*.id, ' ') }}"
          
      #     # Fallback for pull_request (GitHub only sends HEAD SHA)
      #     if [ -z "$commitShas" ] && [ "$EVENT_NAME" == "pull_request" ]; then
      #       commitShas="${{ github.event.pull_request.head.sha }}"
      #     fi
      #     declare -A changedFiles
      #     echo "Processing commits: $commitShas"
      #     for sha in $commitShas; do
      #       echo "Fetching commit: $sha"
      #       commits=$(gh api \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "X-GitHub-Api-Version: 2022-11-28" \
      #         "/repos/$REPO/commits/${sha}")

      #       filenames=$(jq -r '.files[] | select(.status == "modified" or .status == "added") | .filename' <<< "${commits}")
            
      #       for filename in $filenames; do
      #         changedFiles["$filename"]=1
      #       done
      #     done

      #     echo ""
      #     echo "✅ Unique Changed Files:"
      #     for file in "${!changedFiles[@]}"; do
      #       echo "$file"
      #     done

      #     # Save output for future steps (optional)
      #     echo "changed_files=${!changedFiles[@]}" >> $GITHUB_OUTPUT
          
      #     # fetch from webhook payload
      #     cat $GITHUB_EVENT_PATH | jq .

      # - name: Get commits between two SHAs
      #   run: |
      #     git fetch origin main
      #     git log origin/main..HEAD --oneline

          
      # - name: Extract modified files into a list and print
      #   run: |
      #     echo "Extracting modified files..."
      #     modified_files=()

      #     # Read each modified file and append to the array
      #     while IFS= read -r file; do
      #       modified_files+=("$file")
      #     done < <(cat "$GITHUB_EVENT_PATH" | jq -r '.commits[].modified[]')

      #     echo "Modified files list:"
      #     for file in "${modified_files[@]}"; do
      #       echo " - $file"
      #     done

      # - name: Extract commit SHAs and changed files into delta.txt
      #   run: |
      #     echo "Commit SHAs and changed files:" > delta.txt
      #     jq -c '.commits[] | {id: .id, added: .added, modified: .modified, removed: .removed}' $GITHUB_EVENT_PATH | while read commit; do
      #       sha=$(echo "$commit" | jq -r '.id')
      #       echo "Commit: $sha" >> delta.txt

      #       echo "Added files:" >> delta.txt
      #       echo "$commit" | jq -r '.added[]?' >> delta.txt

      #       echo "Modified files:" >> delta.txt
      #       echo "$commit" | jq -r '.modified[]?' >> delta.txt

      #       echo "Removed files:" >> delta.txt
      #       echo "$commit" | jq -r '.removed[]?' >> delta.txt

      #       echo "-----" >> delta.txt
      #     done
          
      # - name: Show delta.txt content
      #   run: cat delta.txt
